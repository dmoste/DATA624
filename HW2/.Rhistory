knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(corrplot)
library(pls)
set.seed(0707)
?plot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(corrplot)
library(pls)
set.seed(0707)
initial_import.df <- read.csv("https://raw.githubusercontent.com/dmoste/DATA624/main/Project2/StudentDataTOMODEL.csv")
to_predict.df <- read.csv("https://raw.githubusercontent.com/dmoste/DATA624/main/Project2/StudentEvaluationTOPREDICT.csv")
#Drop missing PH rows
initial_import.df <- initial_import.df %>%
filter(!is.na(PH))
#Separate predictors, response
preds.df <- initial_import.df[,-26]
resp.df <- initial_import.df[,26]
#Impute missing values with medians
brand_code <- preds.df[,1]
preds.df <- lapply(preds.df[,2:ncol(preds.df)], function(x) replace(x, is.na(x), median(x, na.rm = TRUE)))
preds.df <- as.data.frame(preds.df)
preds.df$`Brand.Code` <- brand_code
#Impute missing Brand Code as "C"
brand.code_na <- preds.df$Brand.Code == ""
preds.df[brand.code_na,32] <- "C"
#Drop low-variance variable
preds.df <- preds.df[,-12]
#Center / scale / Box-Cox
trans <- preProcess(preds.df, method = c("center", "scale", "BoxCox"))
preds.df <- predict(trans, preds.df)
#Split into train/test
training_rows <- sample(nrow(preds.df), nrow(preds.df) * 0.80, replace = FALSE)
train_preds.df <- preds.df[training_rows,]
train_resp.df <- resp.df[training_rows]
test_preds.df <- preds.df[-training_rows,]
test_resp.df <- resp.df[-training_rows]
corr_matrix <- cbind(train_preds.df, train_resp.df) %>%
keep(is.numeric) %>%
cor(method = "pearson")
corrplot::corrplot(corr_matrix, method = "circle", is.corr = TRUE)
train_preds2.df <- train_preds.df %>%
select(-`Balling.Lvl`,
-Density,
-`Carb.Rel`,
-`Filler.Level`,
-`Filler.Speed`,
-`Hyd.Pressure3`,
-`Carb.Temp`)
corr_matrix <- cbind(train_preds2.df, train_resp.df) %>%
keep(is.numeric) %>%
cor(method = "pearson")
corrplot::corrplot(corr_matrix, method = "circle", is.corr = TRUE)
#OLS
data_ctrl <- trainControl(method = 'cv', number = 10)
train1.lm <- train(train_preds2.df, train_resp.df,
method = "lm")
summary(train1.lm)
train1_MAPE <- 100 * (sum(abs(train1.lm$finalModel$residuals) / train_resp.df)) / length(train_resp.df)
train2.lm <- train(train_preds2.df[,c(3, 8:11, 13:15, 17:21, 23, 24)], train_resp.df, method = "lm")
summary(train2.lm)
train2_MAPE <- 100 * (sum(abs(train2.lm$finalModel$residuals) / train_resp.df)) / length(train_resp.df)
#Actual vs predicted
plot(x = train_resp.df, y = train2.lm$finalModel$fitted.values,
xlab = "Actual pH values for training set",
ylab = "Fitted pH values for linear model",
main = "Fitted vs Actual pH values for training set")
#Predicted vs residual
plot(x = train2.lm$finalModel$fitted.values, y = train2.lm$finalModel$residuals,
xlab = "Fitted pH values for linear model",
ylab = "Residuals from linear model",
main = "Residuals vs Fitted pH values for training set")
train.pls <- train(train_preds.df, train_resp.df,
method = "pls",
tuneLength = 20,
trControl = data_ctrl)
summary(train.pls)
plot(x = train.pls$results$ncomp, y = train.pls$results$RMSE,
xlab = "Number of components in PLS model",
ylab = "RMSE",
main = "RMSE declines then stabilizes with increase in PLS components")
print("RMSE:")
print(train.pls$results$RMSE[13])
print("R^2:")
print(train.pls$results$Rsquared[13])
train.pls_predicted <- predict(train.pls, train_preds.df)
plot(x = train_resp.df, y = train.pls_predicted)
train.pls_predicted <- predict(train.pls, train_preds.df)
plot(x = train_resp.df, y = train.pls_predicted,
xlab = "Actual pH values for training set",
ylab = "Fitted pH values for training set",
main = "Fitted vs actual pH values for trianing set")
#Residuals
plot(x = train.pls_predicted, y = train_resp.df - train.pls_predicted,
xlab = "Fitted pH values for PLS model",
ylab = "Residuals from PLS model",
main = "PLS Residuals vs Fitted pH values for training set")
enetGrid <- expand.grid(.lambda = c(0, 0.01, 0.1), .fraction = seq(0.05, 1, length = 20))
enetTune <- train(train_preds.df[,-31], train_resp.df,
method = "enet",
tuneGrid = enetGrid,
trControl = data_ctrl)
ggplot(data = enetTune$results, aes(x = fraction, y = RMSE, color = lambda)) +
geom_point()
###
summary(enetTune)
View(enetTune)
ggplot(data = enetTune$results, aes(x = fraction, y = Rsquared, color = lambda)) +
geom_point()
enet_predicted <- predict(enetTune, train_preds.df[,-31])
plot(x = train_resp.df, y = enet_predicted)
plot(x = train_resp.df, y = enet_predicted,
xlab = "Actual pH values",
ylab = "Fitted pH values for Elastic Net model",
main = "Actual vs Fitted pH values for Elastic Net model")
plot(x = enet_predicted, y = train_resp.df - enet_predicted,
xlab = "Fitted pH Values for Elastic Net",
ylab = "Residuals from Elastic Net Model",
main = "Residuals vs Fitted pH Values for Elastic Net")
testset_predicted <- predict(train.pls, test_preds.df)
PLS_test <- data.frame(cbind(test_resp.df, testset_predicted))
PLS_test <- PLS_test %>%
mutate("diff" = testset_predicted - test_resp.df)
PLS_test <- PLS_test %>%
mutate("sq_diff" = diff^2)
PLS_test_RMSE <- sqrt(sum(PLS_test$sq_diff) / nrow(PLS_test))
print("RMSE:")
print(PLS_test_RMSE)
final_preds.df <- to_predict.df[,-26]
final_brand_code <- final_preds.df[,1]
final_preds.df <- lapply(final_preds.df[,2:ncol(final_preds.df)], function(x) replace(x, is.na(x), median(x, na.rm = TRUE)))
final_preds.df <- as.data.frame(final_preds.df)
final_preds.df$`Brand.Code` <- final_brand_code
#Impute missing Brand Code as "C"
final_brand.code_na <- final_preds.df$Brand.Code == ""
final_preds.df[final_brand.code_na,32] <- "C"
#Drop low-variance variable
final_preds.df <- final_preds.df[,-12]
#Center / scale / Box-Cox
final_trans <- preProcess(final_preds.df, method = c("center", "scale", "BoxCox"))
final_preds.df <- predict(final_trans, final_preds.df)
final_PH <- predict(train.pls, final_preds.df)
final_pH
final_PH
View(to_predict.df)
tmp
tmp <- final_preds.df[1]
tmp
tmp <- final_preds.df[1,]
tmp <- final_preds.df[1,]
tmp
tmp_pred <- predict(train.pls, tmp)
tmp_pred <- predict(train.pls, tmp)
tmp_pred <- predict(train.pls, as.data.frame(tmp))
tmp <- cbind(final_preds.df, final_PH)
View(tmp)
View(final_preds.df)
write_csv(final_PH, "C:/Users/dmosc/Downloads/prediction.csv")
write_csv(as.data.frame(final_PH), "C:/Users/dmosc/Downloads/prediction.csv")
View(tmp)
